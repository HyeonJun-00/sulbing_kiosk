html
    head
        title 설빙 - 관리자 페이지
        link( rel="stylesheet", href="//cdn.jsdelivr.net/npm/xeicon@2.3.3/xeicon.min.css" )
        script(src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.4/jquery.js'
        integrity='sha512-6DC1eE3AWg1bgitkoaRM1lhY98PxbMIbhgYCGV107aZlyzzvaWCW1nJW2vDuYQm06hXrW0As6OGKcIaAVWnHJw=='
        crossorigin='anonymous')
        script(src="https://kit.fontawesome.com/90abd907ab.js" crossorigin="anonymous")
        link(rel="preconnect" href="https://fonts.googleapis.com")
        link(rel="preconnect" href="https://fonts.gstatic.com" crossorigin)
        link(href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@700&display=swap" rel="stylesheet")
        link(rel="stylesheet", href="./css/admin_product.css")
    body
        main.mainDisplay
            ul.mainMenu
                li
                    a( href="/admin_order" )
                        img.logo(src="./images/sulbingLogo.png", alt="설빙로고", title="설빙로고")
                li
                    a( href="/admin_order" ) 주문현황
                li
                    a( href="/admin_product" ) 상품관리
                li
                    a( href="/admin_sales" ) 매출
                li
                    a( href="/admin_menu" ) 메뉴관리
                li
                    a( href="/admin_user" ) 회원관리
            section.adminPage
                section.headFrame
                    h1 주문현황
                section.mainContent
                    - let menuObjLv1= {}; // 메뉴 레벨 1 --> 출력
                    for item in menu
                        - menuObjLv1[item.lv1_id] = item.lv1_name;
                        - menuObjLv1[item.lv1_id] = item.lv1_name;
                    //- console.log( "menu1: ", menuObjLv1 );
                    - let menuObjLv2= {}; // 메뉴 레벨 2 --> 출력
                    for item in menu
                        - (!menuObjLv2[item.lv1_id]) && (menuObjLv2[item.lv1_id] = []);
                        - menuObjLv2[item.lv1_id].push({lv2_id: item.lv2_id, lv2_name: item.lv2_name});
                    //- console.log( "menu2: ", menuObjLv2 );
                    -let productOptionObj = {};
                    for item, key in productOption
                        - (!productOptionObj[item.product_id]) && (productOptionObj[item.product_id] = {});
                        - (!productOptionObj[item.product_id][item.option_category]) && (productOptionObj[item.product_id][item.option_category] = []);
                        - productOptionObj[item.product_id][item.option_category].push(item);
                    //- console.log(productOptionObj);
                    - let productObj= {}; // 상품
                    for item, key in product
                        - productObj[item.product_id] = item;
                            - productObj[item.product_id][`option`] = productOptionObj[item.product_id];
                    //- console.log( productObj );
                    - let menuInProductObj= {}; // 메뉴와 상품 매핑 --> 출력
                    for item in menuInProduct
                        - (!menuInProductObj[item.menu_id]) && (menuInProductObj[item.menu_id] = []);
                        - menuInProductObj[item.menu_id].push(item);
                    //- console.log( menuInProductObj );
                    section.searchBox
                        section.menuSet
                            ul.menuLv1
                                for item, key in menuObjLv1
                                    li( class=`${ key == 1? 'active': '' }`, data-lv1-id=`${key}` )= item
                            for item, key in menuObjLv2
                                ul.menuLv2( class=`${ key == 1? 'active': '' }` )
                                    for v in item
                                        li( data-lv2-pid=`${key}`, data-lv2-id=`${v.lv2_id}` )= v.lv2_name
                    section.postTable
                        ul.productRowSet
                            li
                                ul.productColSet
                                    li No
                                    li 대메뉴
                                    li 소메뉴
                                    li 상품명
                                    li 상세 설명
                                    li 재고
                                    li 알러지 정보
                                    li 가격(원)
                                    li 할인율(%)
                                    li 출시일
                                    li 기능
                            li.productSearchRow
                                ul.productColSet
                                    li.productColEmpty
                                        i.xi-search
                                    li
                                        input( type="text", name="menuLv1Name", placeholder="all" )
                                    li
                                        input( type="text", name="menuLv2Name", placeholder="all" )
                                    li
                                        input( type="text", name="name" )
                                    li
                                        input( type="text", name="description" )
                                    li
                                        input( type="number", name="stock" )
                                    li
                                        input( type="text", name="allergy")
                                    li
                                        input( type="number", name="price" )
                                    li
                                        input( type="number", name="discount")
                                    li
                                        input( type="date", name="release_date" )
                                    li
                                        i.xi-eraser-o.searchResetBtn
                            ul.productReadRowSet
                                - let idxNo= 1;
                                each item, key in menuInProductObj
                                    //ul( data-menu-id=`${key}` )
                                    for v, vk in item
                                        li.productReadRow
                                            form
                                                ul.productColSet( data-use=`${productObj[v.product_id].deleted_date == null ?'active': 'inactive'}`, data-stock=`${productObj[v.product_id].stock != 0 ?'': 'soldout'}` )
                                                    li= idxNo++
                                                        input.fixCol( type="hidden", name="id", data-origin-value=`${v.product_id}`, value=`${v.product_id}` disabled )
                                                    li
                                                        input.fixCol( type="text", name="menuLv1Name", data-origin-value=`${productObj[v.product_id].lv1_menu_name}`, value=`${productObj[v.product_id].lv1_menu_name}`, disabled )
                                                    li
                                                        input.fixCol( type="text", name="menuLv2Name", data-origin-value=`${productObj[v.product_id].lv2_menu_name}`, value=`${productObj[v.product_id].lv2_menu_name}`, disabled )
                                                    li
                                                        input( type="text", name="name", data-origin-value=`${productObj[v.product_id].name}`, value=`${productObj[v.product_id].name}`, disabled )
                                                    li
                                                        input( type="text", name="description", data-origin-value=`${productObj[v.product_id].description?productObj[v.product_id].description:''}`, value=`${productObj[v.product_id].description?productObj[v.product_id].description:''}`, disabled )
                                                    li
                                                        input( type="number", name="stock", data-origin-value=`${productObj[v.product_id].stock}`, value=`${productObj[v.product_id].stock}`, disabled )
                                                    li
                                                        input( type="text", name="allergy", data-origin-value=`${productObj[v.product_id].allergy?productObj[v.product_id].allergy:''}`, value=`${productObj[v.product_id].allergy?productObj[v.product_id].allergy:''}`, disabled )
                                                    li
                                                        input( type="text", name="view_price", data-origin-value=`${productObj[v.product_id].price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`, value=`${productObj[v.product_id].price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',')}`, disabled )
                                                        input( type="hidden", name="price", data-origin-value=`${productObj[v.product_id].price}`, value=`${productObj[v.product_id].price}`, disabled )
                                                    li
                                                        input( type="number", name="discount", data-origin-value=`${productObj[v.product_id].discount}`, value=`${productObj[v.product_id].discount}`, disabled )
                                                    li= productObj[v.product_id].release_date
                                                    li
                                                        input.fixCol( type="button", data-event-mode="option", value="옵션", class=`${ productObj[v.product_id].option?'': 'optionNot' }` )
                                                        input.productUpdateBtn( type="button", data-event-mode="update", data-origin-value="수정", value="수정", disabled )
                                                        input.fixCol( type="button", data-event-mode="active", value="판매" )
                                                        input.fixCol( type="button", data-event-mode="inactive", value="미판매" )
                                                    unless !productObj[v.product_id].option
                                                        .hiddenOption
                                                            for oc, ok in productObj[v.product_id].option
                                                                ul( data-option-category=`${ok}` )
                                                                    for oo in productObj[v.product_id].option[ok]
                                                                        li( data-option-id=`${oo.option_id}` )
                                                                            span( data-option-name=`${oo.option_name}` )
                                                                            - let finalOptionPrice= Number( oo.option_price ) - ( ( Number( oo.option_price ) / 100 ) * Number( oo.option_discount ) );
                                                                            span( data-option-price=`${finalOptionPrice}` )
                                else
                                    li.emptyRow 게시물이 존재하지 않습니다.
                        //section.tablePaging
                            - let pageCnt= ( ( orderTotCnt[0].cnt / 10 ) < 1 )? 1 : ( orderTotCnt[0].cnt / 10 ) - 1;
                            - for( let i= 0; i < pageCnt; i++ )
                            a( data-page-idx=`${i}`, data-page=`${i == nowPage}` )= i + 1
                        section.modalConfirmBak#modalConfirmBak
                            section.modalConfirm
                                p 수정하시겠습니까
                                .modalBtnSet
                                    button.modalBtn( data-modal-confirm=true ) YES
                                    button.modalBtn( data-modal-confirm=false ) CANCEL
        script( src="https://unpkg.com/axios/dist/axios.min.js")
        script(src="./js/adminProduct.js")